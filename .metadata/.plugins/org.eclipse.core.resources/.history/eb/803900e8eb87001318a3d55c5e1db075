package string.reversestring;

public class ReverseString {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		String s = "This is test string";
		usingSingleCharArray(s);
		usingMultipleCharArray(s);
		usingRecursion(s);
	}
	
	//This is using temp variable. This is the efficient way bcos it loops only 1/2 of string length.
	public static void usingSingleCharArray(String s){
		char[] charArr = s.toCharArray();
		
		char temp;
		for(int i=0;i<charArr.length/2;i++){   //loop only 1/2 of the string length else it'll start replacing again.
			temp = charArr[i];
			
			charArr[i] = charArr[charArr.length - (i+1)];
			charArr[charArr.length - (i+1)] = temp;
		}
		System.out.println(new String(charArr));
	}
	
	//this is using new char array.
	public static void usingMultipleCharArray(String s){
		char[] charArr = s.toCharArray();
		
		char[] newString = new char[charArr.length];
		for(int i=0;i<charArr.length;i++){
			newString[i] = charArr[charArr.length - (i+1)];
		}
		System.out.println(String.copyValueOf(newString));
	}
	
	//This is using recursion.
	public static void usingRecursion(String s){
		if(s.length() != 0){
			System.out.print(s.charAt(s.length()-1)); //print the last char.
			usingRecursion(s.substring(0, s.length() -1)); //send the remaining string again to method from 0 to last -1.
		}
		return;
	}
	
	public static void usingStringBuilder(String s){
		StringBuilder stringBuilder = new StringBuilder(s);
		while(i<s.length()/2){
			
		}
	}
	
	

}
